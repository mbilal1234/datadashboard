datadog-rds-replication-dashboardA tool that enables a user to create a datadog dashboard that visualizes AWS RDS PostgreSQL Read Replication Metrics. The project contains a JSON template for the dashboard and a python script to help the user create it. Also, it includes a bash script that can be used to retrieve the schema of a datadog dashboard.HOWTOCreate the dashboardA JSON template is provided for the users to create the dashboardUsers can create the dashboard by running the create-dashboard executableIn order to run the executable, please install the python package requirements via the running command below:pip install -r requirements.txtHere's an example on how to run the executable../create-dashboard --replica-db-instance-id my-read-replica-db-instance-id --source-db-instance-id my-primary-db-instance-id --api-key my-datadog-api-key --app-key my-datadog-application-key--template-file "../template.json" --title "My PostgreSQL Instance Replication Monitor Dashboard"Get Dashboard JSON TemplateYou can run export_dash.sh to obtain the JSON definition of your dashboardBefore running the script, you must replace the values for dash_id, api_key, app_key with your dashboard ID, Datadog API key and Datadog application key respectivelyThen execute the command below in a terminal:./export_dash.shIf you don't have or want to install the jq CLI on your machine you can alternatively use the example below. The dash property from the resulting JSON file is the dashboard JSON schema definition.curl -X GET "https://app.datadoghq.com/api/v1/dash/${dash_id}?api_key=${api_key}&application_key=${app_key}" -o dash.jsonCloudWatch MetricsThis dashboard contains various plots for the RDS primary instance and the read replica which are based on the CloudWatch metrics listed below.Metrics directly related to PostgreSQL instance replicationMetric NameDescriptionOldestReplicationSlotLagThe lagging size of the replica lagging the most in terms of WAL data received. Applies to PostgreSQL. Units: MegabytesReplicaLagThe amount of time a Read Replica DB instance lags behind the source DB instance. Applies to MySQL, MariaDB, and PostgreSQL Read Replicas. Units: SecondsReplicationSlotDiskUsageThe disk space used by replication Units: MegabytesMetrics indirectly related to PostgreSQL instance replicationMetric NameDescriptionNetworkReceiveThroughputThe incoming (Receive) network traffic on the DB instance, including both customer database traffic and Amazon RDS traffic used for monitoring and replication. Units: Bytes/secondNetworkTransmitThroughputThe outgoing (Transmit) network traffic on the DB instance, including both customer database traffic and Amazon RDS traffic used for monitoring and replication. Units: Bytes/secondYou can view the AWS RDS CloudWatch metrics documentation for more information about metrics associated with different database enginesNOTEReplicaLag metricThe name of the metric suggests that it measures how far behind a replica is from it's primary. However, this is not the case. ReplicaLag in PostgreSQL databases, actually measures how far behind a replica could be from the primary. This distinction is important. In a low-throughput scenario, a PostgreSQL primary database will only ping a replica once every five minutes. From the replica's perspective, this could mean that the database is up to five minutes behind the primary. However, this actually indicates that the primary has no data being written to it.Thus, we can draw the following conclusions from ReplicaLag in PostgreSQL databases:When ReplicaLag periodically grows from 0 to 300 (seconds) and then drops back to 0 (i.e., a sawtooth), it is a very strong indicator that the replica is up-to-date.When ReplicaLag is constantly at 0, it means there is a constrant stream of data being written to the primary, and the replica is keeping up with the primarywhen ReplicaLag is none of the above, it means the replica is actually lagging.In conclusion, a single look at ReplicaLag cannot actually tell you whether the replica is lagging or not. In order to tell whether your replica is lagging, you need to look at the history of the ReplicaLag metric, ideally with a resolution of one minute and with at least seven minutes of historical data.
